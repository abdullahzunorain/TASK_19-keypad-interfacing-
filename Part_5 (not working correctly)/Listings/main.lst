C51 COMPILER V9.60.7.0   MAIN                                                              09/16/2024 10:09:35 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          #include "LCD.h"
   3          #include "RTC.h"
   4          
   5          sbit DS1302_IO=P3^4;
   6          sbit DS1302_CE=P3^5;
   7          sbit DS1302_CLK=P3^6;
   8          
   9          
  10          
  11          
  12          unsigned int read_bytes[12];
  13          
  14          void SCLK_Pulse(){
  15   1        DS1302_CLK=1;
  16   1        DS1302_CLK=0;
  17   1      }
  18          
  19          void send_bit(unsigned int bitt){
  20   1        if(bitt!=0)
  21   1        {
  22   2          DS1302_IO=1;                    //one bit write
  23   2        }
  24   1        else
  25   1        {
  26   2          DS1302_IO=0;
  27   2        }
  28   1      }
  29          
  30          void write_byte(unsigned int byte){
  31   1        unsigned int i,Bit;
  32   1        for(i=0; i<8; i++)
  33   1        {                                        //rtc write byte
  34   2          Bit =byte &(1<<i);
  35   2          send_bit(Bit);
  36   2          SCLK_Pulse();
  37   2        }
  38   1      }
  39          
  40          unsigned char read_byte(unsigned char cmd)
  41          {
  42   1        unsigned int j,dat=0;
  43   1        write_byte(cmd);
  44   1        for(j=0; j<8; j++)
  45   1        {
  46   2          dat>>=1;
  47   2          if(DS1302_IO)
  48   2          {
  49   3            dat|=0x80;
  50   3          }
  51   2          else
  52   2          {
  53   3            dat&=0x7F;
  54   3          }
C51 COMPILER V9.60.7.0   MAIN                                                              09/16/2024 10:09:35 PAGE 2   

  55   2          SCLK_Pulse();
  56   2        }
  57   1        return dat;
  58   1      }
  59          void DS1302_writebyte(unsigned char cmd, unsigned char value)
  60          {
  61   1        DS1302_CE=1;
  62   1        write_byte(cmd);                      //rtc write byte at address
  63   1        write_byte(value);
  64   1        DS1302_CE=0;
  65   1      }
  66          void DS1302_readbyte()
  67          {
  68   1        unsigned int dat=0,i,j;
  69   1        DS1302_CE=1;
  70   1        
  71   1        write_byte(DS1302_READ_BURST);
  72   1        for(i=0; i<8; i++)           //store in array
  73   1        {
  74   2          dat=0;
  75   2          for(j=0; j<8; j++)         //bit by bit read
  76   2          {
  77   3            dat>>=1;
  78   3          if(DS1302_IO)
  79   3          {                                           //reading ta enable
  80   4            dat|=0x80;
  81   4          }
  82   3          else
  83   3          {
  84   4            dat&=0x7F;
  85   4          }
  86   3          SCLK_Pulse();
  87   3          }
  88   2          read_bytes[i]=dat;
  89   2        } 
  90   1        DS1302_CE=0;  
  91   1      }
  92          void DS1302_init()
  93          {
  94   1        unsigned char r;
  95   1        DS1302_CE=0; 
  96   1        DS1302_CLK=0;
  97   1        DS1302_writebyte(DS1302_CONTROL,0x00);
  98   1        DS1302_writebyte(DS1302_CHARGER,0xAB);
  99   1        
 100   1        r=read_byte(DS1302_SECOND_READ);                
 101   1        if((r&DS1302_SECOND_READ)!=0)
 102   1          DS1302_writebyte(DS1302_SECOND,0);              //zarah value zero ka
 103   1      }
 104          
 105          void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second)
 106          {
 107   1        DS1302_writebyte(DS1302_SECOND,second);
 108   1        DS1302_writebyte(DS1302_MINUTE,minute);
 109   1        DS1302_writebyte(DS1302_HOUR,hour);
 110   1      
 111   1      }
 112          
 113          void lcd_display(unsigned char number){
 114   1        lcd_char(((number>>4)&0x0F)+0x30); //ten
 115   1        lcd_char((number&0x0F)+0x30);   //unit
 116   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              09/16/2024 10:09:35 PAGE 3   

 117          
 118          void DS1302_gettime(void){
 119   1        lcd_set_cursor(0,0);
 120   1        lcd_string("TIME:");
 121   1        
 122   1        lcd_set_cursor(0,6);
 123   1        lcd_display(read_bytes[2]);
 124   1        lcd_char(':');
 125   1        delay(10);
 126   1        
 127   1        
 128   1        lcd_set_cursor(0,9);
 129   1        lcd_display(read_bytes[1]);
 130   1        lcd_char(':');
 131   1        delay(10);
 132   1        
 133   1        lcd_set_cursor(0,12);
 134   1        lcd_display(read_bytes[0]);
 135   1        delay(10);
 136   1          
 137   1      }
 138          void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year)
 139          {
 140   1      DS1302_writebyte(DS1302_DATE,day);
 141   1      DS1302_writebyte(DS1302_MONTH,month);
 142   1      DS1302_writebyte(DS1302_YEAR,year);
 143   1      }
 144          void DS1302_getdate(void)
 145          {
 146   1        lcd_set_cursor(1,0);
 147   1        lcd_string("DATE:");
 148   1        
 149   1        lcd_set_cursor(1,6);
 150   1        lcd_display(read_bytes[3]);
 151   1        lcd_char(':');
 152   1        delay(10);
 153   1        
 154   1        lcd_set_cursor(1,9);
 155   1        lcd_display(read_bytes[4]);
 156   1        lcd_char(':');
 157   1        delay(10);
 158   1        
 159   1        lcd_set_cursor(1,12);
 160   1        lcd_display(read_bytes[6]);
 161   1        delay(10);
 162   1      }
 163          void rtc_state()
 164          {
 165   1        lcd_init();
 166   1        DS1302_init();
 167   1        DS1302_settime(0x23,0x59,0x50);
 168   1        DS1302_setdate(0x31,0x12,0x23);
 169   1        while(1)
 170   1        {
 171   2          DS1302_CE=1;
 172   2          DS1302_readbyte();
 173   2          DS1302_CE=0;
 174   2          
 175   2          DS1302_gettime();
 176   2          DS1302_getdate();
 177   2          
 178   2        }
C51 COMPILER V9.60.7.0   MAIN                                                              09/16/2024 10:09:35 PAGE 4   

 179   1      }
 180          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    535    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
